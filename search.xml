<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[明解C语言 实践篇]]></title>
    <url>%2F2019%2F10%2F03%2F%E6%98%8E%E8%A7%A3C%E8%AF%AD%E8%A8%80-%E4%B8%AD%E7%BA%A7%E7%AF%873%2F</url>
    <content type="text"><![CDATA[明解C语言-中级篇第1章 猜数游戏1-1 猜数判定 1.通过 if语句实现条件分支 123456789101112131415161718/* 猜数游戏（其一：测试版）*/#include &lt;stdio.h&gt;int main(void)&#123; int no; /* 读取的值 */ int ans = 7; /* 目标数字 */printf("请猜一个0~9的整数。\n\n");printf("是多少呢：");scanf("%d", &amp;no);if (no &gt; ans) printf("\a再小一点。\n");else if (no &lt; ans) printf("\a再大一点。\n");else printf("回答正确。\n");return 0;&#125; 转义字符 \n 换行 \a 警报 2.if 语句的嵌套 一个 if 语句 由一个布尔表达式后跟一个或多个语句组成。 if语法C 语言中 if 语句的语法： 1234if(boolean_expression)&#123; /* 如果布尔表达式为真将执行的语句 */&#125; C 语言中 if…else 语句的语法： 12345678if(boolean_expression)&#123; /* 如果布尔表达式为真将执行的语句 */&#125;else&#123; /* 如果布尔表达式为假将执行的语句 */&#125; if…else if…else 语句一个 if 语句后可跟一个可选的 else if…else 语句，这可用于测试多种条件。 当使用 if…else if…else 语句时，以下几点需要注意： 一个 if 后可跟零个或一个 else，else 必须在所有 else if 之后。 一个 if 后可跟零个或多个 else if，else if 必须在 else 之前。 一旦某个 else if 匹配成功，其他的 else if 或 else 将不会被测试。 C 语言中的 if…else if…else 语句的语法： 12345678910111213141516if(boolean_expression 1)&#123; /* 当布尔表达式 1 为真时执行 */&#125;else if( boolean_expression 2)&#123; /* 当布尔表达式 2 为真时执行 */&#125;else if( boolean_expression 3)&#123; /* 当布尔表达式 3 为真时执行 */&#125;else &#123; /* 当上面条件都不为真时执行 */&#125; 在 C 语言中，嵌套 if-else 语句是合法的，这意味着您可以在一个 if 或 else if 语句内使用另一个 if 或 else if 语句。 C 语言中 嵌套 if 语句的语法： 12345678if( boolean_expression 1)&#123; /* 当布尔表达式 1 为真时执行 */ if(boolean_expression 2) &#123; /* 当布尔表达式 2 为真时执行 */ &#125;&#125; 1-1 重复猜到对为止重复输入 循环判断 do while 语句 先循环 后判断 注意 while 末尾带有; 1.通过do语句循环 C do…while 循环不像 for 和 while 循环，它们是在循环头部测试循环条件。在 C 语言中，do…while 循环是在循环的尾部检查它的条件。 do…while 循环与 while 循环类似，但是 do…while 循环会确保至少执行一次循环。 语法C 语言中 do…while 循环的语法： 12345do&#123; statement(s);&#125;while( condition ); 请注意，条件表达式出现在循环的尾部，所以循环中的 statement(s) 会在条件被测试之前至少执行一次。 如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement(s)。这个过程会不断重复，直到给定条件变为假为止。 实例12345678910111213141516#include &lt;stdio.h&gt; int main ()&#123; /* 局部变量定义 */ int a = 10; /* do 循环执行 */ do &#123; printf("a 的值： %d\n", a); a = a + 1; &#125;while( a &lt; 20 ); return 0;&#125; 当上面的代码被编译和执行时，它会产生下列结果： 12345678910a 的值： 10a 的值： 11a 的值： 12a 的值： 13a 的值： 14a 的值： 15a 的值： 16a 的值： 17a 的值： 18a 的值： 19 2.通过while语句循环 while 循环只要给定的条件为真，C 语言中的 while 循环语句会重复执行一个目标语句。 语法C 语言中 while 循环的语法： 1234while(condition)&#123; statement(s);&#125; 在这里，statement(s) 可以是一个单独的语句，也可以是几个语句组成的代码块。 condition 可以是任意的表达式，当为任意非零值时都为 true。当条件为 true 时执行循环。 当条件为 false 时，退出循环，程序流将继续执行紧接着循环的下一条语句。 实例12345678910111213141516#include &lt;stdio.h&gt; int main ()&#123; /* 局部变量定义 */ int a = 10; /* while 循环执行 */ while( a &lt; 20 ) &#123; printf("a 的值： %d\n", a); a++; &#125; return 0;&#125; 当上面的代码被编译和执行时，它会产生下列结果： 12345678910a 的值： 10a 的值： 11a 的值： 12a 的值： 13a 的值： 14a 的值： 15a 的值： 16a 的值： 17a 的值： 18a 的值： 19 C break 语句C 语言中 break 语句有以下两种用法： 当 break 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句。 它可用于终止 switch 语句中的一个 case。 如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。 语法C 语言中 break 语句的语法： 1break; 实例123456789101112131415161718192021#include &lt;stdio.h&gt; int main ()&#123; /* 局部变量定义 */ int a = 10; /* while 循环执行 */ while( a &lt; 20 ) &#123; printf("a 的值： %d\n", a); a++; if( a &gt; 15) &#123; /* 使用 break 语句终止循环 */ break; &#125; &#125; return 0;&#125; 当上面的代码被编译和执行时，它会产生下列结果： 123456a 的值： 10a 的值： 11a 的值： 12a 的值： 13a 的值： 14a 的值： 15 1-3 随机设定目标数字]]></content>
      <categories>
        <category>项目实践</category>
        <category>语法练习</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>语法</tag>
        <tag>C语言</tag>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10.2 test]]></title>
    <url>%2F2019%2F10%2F02%2Ftest%2F</url>
    <content type="text"><![CDATA[C语言实验题――相加和最大值时间限制: 1000MS 内存限制: 65536KByte 64位IO格式:%I64d &amp; %I64u 描述输入三个整数a,b,c。并进行两两相加，最后比较相加和的最大值。输入输入数据包含三个整数，用空格分开。输出输出两两相加后的最大值。样例输入**样例输出**[提交 1001 害死人不偿命的(3n+1)猜想 (15 分) 卡拉兹(Callatz)猜想： 对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展…… 我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？ 输入格式：每个测试输入包含 1 个测试用例，即给出正整数 n 的值。 输出格式：输出从 n 计算到 1 需要的步数。 输入样例：13 输出样例：15 问题 A: 例题5-1-1 连续自然数求和时间限制: 1 Sec 内存限制: 12 MB提交: 2221 解决: 1832[提交][状态][讨论版][命题人:外部导入] 题目描述求1+2+3+…+100，即求 要求用while语句实现 输入无 输出要求的和，末尾输出换行。 样例输入1无 样例输出15050 [提交][状态] 描述 输入三个整数a,b,c。并进行两两相加，最后比较相加和的最大值。 输入 输入数据包含三个整数，用空格分开。 输出 输出两两相加后的最大值。 样例输入 样例输出 1234567891011121314151617181920212223## **C语言实验题――相加和最大值****描述**输入三个整数a,b,c。并进行两两相加，最后比较相加和的最大值。**输入**输入数据包含三个整数，用空格分开。**输出**输出两两相加后的最大值。**样例输入****样例输出**5]]></content>
      <categories>
        <category>CS基础</category>
      </categories>
      <tags>
        <tag>计组</tag>
        <tag>专业课</tag>
        <tag>笔记</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理]]></title>
    <url>%2F2019%2F10%2F02%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[计算机组成原理预备知识进制知识 数电逻辑 计算机中阶符、阶码、数符、尾数的意思一个浮点数a由两个数m和e来表示：a = m × b^e。在任意一个这样的系统中，我们选择一个基数b（记数系统的基）和精度p（即使用多少位来存储）。m（即尾数）是形如±d.ddd…ddd的p位数（每一位是一个介于0到b-1之间的整数，包括0和b-1)。如果m的第一位是非0整数,m称作规格化的。有一些描述使用一个单独的符号位(s 代表+或者-）来表示正负，这样m必须是正的。e是指数。 结构由此可以看出，在计算机中表示一个浮点数，其结构如下：尾数部分（定点小数） 阶码部分（定点整数） 一个十进制数可写成一个纯小数乘上10的若干次方，相似的，一个二进制可写成一个纯小数乘上2的若干次方。例如，11.01=22×0.1101；一般地,任一个二进制N，可表示为N=2j×S； 其中J为二进制数，叫阶码；J如果有正负号的话，正负号就叫阶符；S为纯小数，叫做尾数；数符，指的是N整个数的符号。 浮点数能表示的范围由阶码的位数决定，精确度有尾数的位数决定————————————————版权声明：本文为CSDN博主「猴儿2333」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/littlecase233/article/details/82959410 在尾数用补码表示时，规格化浮点数应满足尾数最高数位与符号位不同，如相同就是不满足规格化。尾数用双符号位补码表示，经过加/减运算之后，可能出现以下六种情况，即① 00.1 x x … x② 11.0 x x … x③ 00.0 x x … x④ 11.1 x x … x⑤ 01.x x x … x⑥ 10.x x x … x 第①、②种情况，符合规格化数的定义，已是规格化数。 第③、④种情况不是规格化数，需要使尾数左移以实现规格化，这个过程称为左规。尾浮点数运算的的规格化浮点数运算的的规格化浮点数运算的的规格化数每左移一位，阶码相应减 1，直至成为规格化数为止。左规可以进行多次。 第⑤、⑥种情况在定点加减运算中称为溢出，但在浮点加减运算中，只表明此时尾数的 绝对值大于 1，而并非真正的溢出。这种情况应将尾数右移以实现规格化。这个过程称为右 规。尾数每右移一位，阶码相应加 1。右规最多只有一次。 总结：左规处理，及时数往小数点左边走，阶码-1，右规反之。 https://blog.csdn.net/qq546770908/article/details/45486397 小数的二进制表示，阶码知识点 加 题目 加 排版 加 图片 加 个人思想第1章 计算机系统概率1.1 计算机的分类 1.2 计算机的发展简史已知补码如何求原码（真值）~1.当补码最高位为0时因为最高位为0，即该数是正数，正数的原码、反码、补码都是一样的。 所以该补码即是原码。 例如：【X】补=01111111求真值。 解：因为最高位为0，所以【X】原=【X】补=01111111=127. 2.当补码最高位为1时因为最高位是1，所以该数为负数。负数的补码=反码+1 补码 的补码 即为该补码的原码（真值）。]]></content>
      <categories>
        <category>CS基础</category>
      </categories>
      <tags>
        <tag>计组</tag>
        <tag>专业课</tag>
        <tag>笔记</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019.10.1 C语言入门及进阶 （国庆七天乐-第一天）]]></title>
    <url>%2F2019%2F10%2F01%2FC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%8F%8A%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[C语言入门及进阶 \t 制表符 与 空格的关系 https://www.cnblogs.com/guokai/p/3641953.html tab 如何 在 C 输出 \ % %% \ \ 如何在 C使用 百分数 % double n,x; n=0.01*x; 2.各种类型输入输出 123456789101112131415特别注意 A-Z区间的表示 以及 字符的 ''#include &lt;stdio.h&gt;int main()&#123; char n; scanf("%c",&amp;n); if(n&gt;='A'&amp;&amp;n&lt;='Z')&#123; printf("%c",n+32);&#125; else printf("%c",n); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;stdio.h&gt;int main()&#123; char a,b,c,d,e; scanf("%c",&amp;a); scanf("%c",&amp;b); scanf("%c",&amp;c); scanf("%c",&amp;d); scanf("%c",&amp;e); printf("password is %c%c%c%c%c",a+4,b+4,c+4,d+4,e+4); return 0;&#125;方法 #include &lt;stdio.h&gt;int main()&#123; char a,b,c,d,e; scanf("%c%c%c%c%c",&amp;a,&amp;b,&amp;c,&amp;d,&amp;e); printf("password is %c%c%c%c%c",a+4,b+4,c+4,d+4,e+4); return 0;&#125;方法三#include &lt;stdio.h&gt;int main()&#123; char a,b,c,d,e; a=getchar(); b=getchar(); c=getchar(); d=getchar(); e=getchar(); printf("password is "); putchar(a+4); putchar(b+4); putchar(c+4); putchar(d+4); putchar(e+4); return 0;&#125; 这种 不行 会报错 1234567891011121314#include&lt;stdio.h&gt;//实现摄氏温度和华氏温度的转化函数float f_c(float F)&#123; return 5*(F-32)/9;&#125;int main()&#123; float f,c; scanf("%f",&amp;f); c=f_c(f); printf("%.2f",c); return 0;&#125; 3.简单运算 123456789#include &lt;stdio.h&gt;int main()&#123; int a,b,c; scanf("%d%d",&amp;a,&amp;b); c=(a/10)*1000+(a%10)*10+(b/10)*100+(b%10); printf("The result is: %d",c); return 0;&#125; 4.加点难度的运算 123456789#include &lt;stdio.h&gt;int main()&#123; int n,x; scanf("%d",&amp;n); x=(n%10)*100+((n%100)/10)*10+(n/100); printf("%d",x); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;stdio.h&gt;int main()&#123; int a; int b; scanf("%d %d", &amp;a, &amp;b); printf("%d", b/a+1); return 0;&#125;化繁为简 考虑简单的超时的程序？ ＞的话 反过来就要考虑 小于等于#include &lt;stdio.h&gt;int main()&#123; int a,b,m=1,z; scanf("%d%d",&amp;a,&amp;b); while(z&lt;=b) &#123; m++; z=a*m; &#125; printf("%d",m); return 0;&#125;这里涉及了 C语言运行程序的计算 调试 https://www.cnblogs.com/Emcikem/p/11518388.html#include&lt;stdio.h&gt;#include&lt;time.h&gt; //用到clock()函数int main() &#123; int begintime,endtime; int i = 0; int a[1002]; begintime=clock(); //计时开始 /* 代码块 */ endtime = clock(); //计时结束 printf("\n\nRunning Time：%dms\n", endtime-begintime); return 0;&#125; 1234567891011#include &lt;stdio.h&gt;int main()&#123; int x,y,n,m; scanf("%d%d",&amp;n,&amp;m); y=(m-2*n)/2; x=n-y; printf("%d %d",x,y); return 0;&#125;数学果然是个好东西 5.简单选择结构 123456789101112131415#include &lt;stdio.h&gt;int main()&#123; int a; scanf("%d",&amp;a); if(a%3==0&amp;&amp;a%5==0) &#123; printf("Yes"); &#125; else &#123; printf("No"); &#125; return 0;&#125; 1234567891011121314151617181920212223242526#include &lt;stdio.h&gt;int main()&#123; int a,b,c,t; scanf("%d %d %d",&amp;a,&amp;b,&amp;c); if(a&gt;b) &#123; t=a; a=b; b=t; &#125; if(a&gt;c) &#123; t=a; a=c; c=t; &#125; if(b&gt;c) &#123; t=b; b=c; c=t; &#125; printf("%d",b); return 0;&#125; 三目运算符三数比较123456789#include &lt;stdio.h&gt;int main()&#123; int a,b,c,max; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); max=(a&gt;b)?((a&gt;c)?a:c):((b&gt;c)?b:c); printf("max=%d",max); return 0;&#125; 二数比较123456789#include &lt;stdio.h&gt;int main()&#123; int a,b,max; scanf("%d%d",&amp;a,&amp;b); max=a&gt;b?a:b; printf("max=%d",max); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536#include&lt;stdio.h&gt;int main()&#123; int a,b,c,x,y,z,max; scanf("%d %d %d",&amp;a,&amp;b,&amp;c); x=a+b; y=a+c; z=b+c; max=(x&gt;y)?((x&gt;z)?x:z):((y&gt;z)?y:z); printf("%d",max); return 0;&#125;#include&lt;stdio.h&gt;int main()&#123;int a,b,c;int x,y,z; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); x=a+b; y=a+c; z=b+c; if(x&gt;=y&amp;&amp;x&gt;=z) &#123; printf("%d",x); &#125;else&#123; if(y&gt;z&amp;&amp;y&gt;x) &#123; printf("%d",y); &#125;else&#123; printf("%d",z); &#125; &#125;&#125; 1234567891011#include &lt;stdio.h&gt;int main()&#123; int a,b,c,max,min,n; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); max=(a&gt;b)?((a&gt;c)?a:c):((b&gt;c)?b:c); min=(a&lt;b)?((a&lt;c)?a:c):((b&lt;c)?b:c); n=max-min; printf("%d",n); return 0;&#125; 123456789101112131415#include&lt;stdio.h&gt;int main()&#123;C int a,b,c,d; scanf("%d.%d.%d.%d",&amp;a,&amp;b,&amp;c,&amp;d); if(0&lt;=a&amp;&amp;a&lt;=255&amp;&amp; 0&lt;=b&amp;&amp;b&lt;=255&amp;&amp; 0&lt;=c&amp;&amp;c&lt;=255&amp;&amp; 0&lt;=d&amp;&amp;d&lt;=255) printf("YES"); else printf("NO"); return 0; &#125; 6.加强选择结构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;stdio.h&gt;int main()&#123; int month,year; scanf("%d\\%d",&amp;year,&amp;month); if(month==1||month==3||month==5||month==7||month==8||month==10||month==12) printf("31"); else if(month==4||month==6||month==9||month==11) printf("30"); if(month==2) &#123; if(year%4==0&amp;&amp;year%100!=0||year%400==0) printf("29"); else printf("28"); &#125; return 0;&#125;#include&lt;stdio.h&gt;int main()&#123; int year,month,day; scanf("%d\\%d",&amp;year,&amp;month); switch(month) &#123; case 1: case 3: case 5: case 7: case 8: case 10: case 12:day=31;break; case 4: case 6: case 9: case 11:day=30;break; &#125; if(month==2) &#123; if((year%4==0&amp;&amp;year%100!=0)||year%400==0) day=29; else day=28; &#125; printf("%d",day); return 0;&#125; 123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; float a,b,c; float x1,x2,d; scanf("%f %f %f",&amp;a,&amp;b,&amp;c); if(a!=0)&#123; d=sqrt((b*b)-(4.0*a*c)); x1=((-b+d)/(2.0*a)); x2=((-b-d)/(2.0*a)); if(x1&gt;=x2) &#123; printf("%.2f %.2f",x1,x2); &#125; else printf("%.2f %.2f",x2,x1);&#125; else printf("not root!"); return 0;&#125; 强调 实数的定义 数学知识的补充 课外知识的背景 还有 学好英语！！！！！上面挖个坑 你把函数 指针 学熟 再来补 12345678910111213141516171819202122#include&lt;stdio.h&gt; #include&lt;math.h&gt; int main() &#123; double a,b,c,x1,x2,m,n; scanf("%lf%lf%lf",&amp;a,&amp;b,&amp;c); if(a==0)printf("%.2f %.2f\n",-c/b,-c/b); else if(b*b-4*a*c&lt;0) &#123; m=-b/(2*a); n=sqrt(4*a*c-b*b); if(a&gt;0)printf("%.2f+%.2fi %.2f-%.2fi\n", m,n/(2*a),m,n/(2*a) ); else printf("%.2f+%.2fi %.2f%.2fi\n", m,-n/(2*a),m,n/(2*a)); &#125; else &#123; x1=(-b+sqrt(b*b-4*a*c))/(2*a); x2=(-b-sqrt(b*b-4*a*c))/(2*a); if(x1&gt;x2)printf("%.2f %.2f",x1,x2); else printf("%.2f %.2f",x2,x1); &#125; return 0; &#125; 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;stdio.h&gt; int main() &#123; int x,y,z; scanf("%d,%d,%d",&amp;x,&amp;y,&amp;z); if(x&gt;y&amp;&amp;x&gt;z) &#123; if(y&gt;z) printf("%d %d %d",z,y,x); else printf("%d %d %d",y,z,x); &#125; else if(y&gt;x&amp;&amp;y&gt;z) &#123; if(x&gt;z) printf("%d %d %d",z,x,y); else printf("%d %d %d",x,z,y);&#125; else if(z&gt;y&amp;&amp;z&gt;x)&#123; if(x&gt;y) printf("%d %d %d",y,x,z); else printf("%d %d %d",x,y,z);&#125;return 0; &#125; #include&lt;stdio.h&gt;int main()&#123; int a,b,c,max,min,mid; scanf("%d,%d,%d",&amp;a,&amp;b,&amp;c); max=(a&gt;b)?((a&gt;c)?a:c):((b&gt;c)?b:c); min=(a&lt;b)?((a&lt;c)?a:c):((b&lt;c)?b:c); mid=a+b+c-max-min; printf("%d %d %d",min,mid,max); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#include&lt;stdio.h&gt;typedef struct Time&#123; int h,m,s;&#125;Time;/* 描述时间的结构体 *//* 输入时间函数 */void ReadTime(Time *time)&#123; scanf("%d:%d:%d",&amp;time-&gt;h,&amp;time-&gt;m,&amp;time-&gt;s);&#125;/* 输出时间函数 */void PrintTime(Time *time)&#123; printf("%d:",time-&gt;h); if(time-&gt;m&lt;10) printf("0"); printf("%d:",time-&gt;m); if(time-&gt;s&lt;10) printf("0"); printf("%d",time-&gt;s); &#125;//计算两个时间只差 void TimeSub(Time *time1,Time *time2,Time *time)&#123; long t1,t2,t; t1=time1-&gt;h * 3600 + time1-&gt;m *60 + time1-&gt;s; t2=time2-&gt;h * 3600 + time2-&gt;m *60 + time2-&gt;s; t=t1-t2;//将时间转化为秒 if(t&lt;0) t=t*(-1); //将秒转化为时间 time-&gt;h= t/3600; time-&gt;m= (t-time-&gt;h*3600)/60; time-&gt;s= t%60; &#125;int main()&#123; Time time1,time2,time; ReadTime(&amp;time1);//读时间 ReadTime(&amp;time2);//读第一个时间 TimeSub(&amp;time1,&amp;time2,&amp;time);//计算减法 PrintTime(&amp;time);//返回一个时间 return 0; &#125;#include&lt;stdio.h&gt;int main()&#123; int h1, m1, s1; int h2, m2, s2; int a, b, c; scanf("%d:%d:%d", &amp;h1, &amp;m1, &amp;s1); scanf("%d:%d:%d", &amp;h2, &amp;m2, &amp;s2); if (h1 * 3600 + m1 * 60 + s1 &lt; h2 * 3600 + m2 * 60 + s2) &#123; a = h2 - h1, b = m2 - m1, c = s2 - s1; if (c &lt; 0) &#123; c = 60 + c; b--; &#125; if (b &lt; 0) &#123; b = b + 60; a--; &#125; &#125; else &#123; a = h1 - h2, b = m1 - m2, c = s1 - s2; if (c &lt; 0) &#123; c = 60 + c; b--; &#125; if (b &lt; 0) &#123; b = b + 60; a--; &#125; &#125; printf("%d:%02d:%02d", a, b, c);&#125;#include&lt;stdio.h&gt;int main()&#123; int h1, h2, m1, m2, s1, s2, t1, t2, del; t1 = t2 = 0; scanf("%d:%d:%d",&amp;h1, &amp;m1, &amp;s1); scanf("%d:%d:%d",&amp;h2, &amp;m2, &amp;s2); t1 = h1 * 3600 + m1 * 60 + s1; t2 = h2 * 3600 + m2 * 60 + s2; if(t1 &gt; t2) &#123; del = t1 - t2; &#125; else &#123; del = t2 - t1; &#125; int a, b, c; a = del / 3600; b = del / 60 % 60; c = del % 60; printf("%02d:%02d:%02d\n",a, b, c); return 0;&#125; 7.简单一重循环 123456789#include&lt;stdio.h&gt;int main()&#123; int n,i; scanf("%d",&amp;n); for(i=1;i&lt;=n;i++) printf("%d\n",i); return 0;&#125;]]></content>
      <categories>
        <category>语法练习</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>语法</tag>
        <tag>C语言</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019.9.28 初试茅庐 语法与软件测试 练习]]></title>
    <url>%2F2019%2F09%2F27%2F%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[语法练习题目描述输入三个整数，比较三个数的大小。输出“max=”，之后输出最大的值。 输入三个整数，用逗号分隔。 输出请输出读入的三个整数的最大值，并在最大值之前输出“max=”。请注意不需要输出引号，行尾输出换行。 样例输入18,5,20 样例输出1max=20 题解12345678910111213141516#include &lt;stdio.h&gt;int main()&#123; int a,b,c; scanf("%d,%d,%d",&amp;a,&amp;b,&amp;c); if(a&gt;b) &#123; if (a&gt;c) printf("max=%d",a); else printf("max=%d",c); &#125; else printf("max=%d",b); return 0; &#125; 123456789#include &lt;stdio.h&gt;int main()&#123; int a,b,c,max; scanf("%d,%d,%d",&amp;a,&amp;b,&amp;c); max=((a&gt;b)?a:b)&gt;c?max:c; printf("max=%d",max); return 0; &#125; 递归123456789101112131415`#include &lt;stdio.h&gt;``int F(int n)``&#123;` `if(n==0)` `return 1;` `else` `return F(n-1)*n;` `&#125;``int main()``&#123;` `int n;` `scanf("%d",&amp;n);` `printf("%d\n",F(n));` `return 0;` `&#125;` 题目描述输入一个2000至2500年间（包含2000年和2500年）的任意年份，判断是否是闰年。 输入输入一个整数year，表示年份。输入保证2000≤year≤2500。 输出如果输入的年份是闰年，请输出“leap year”，否则请输出“not leap year”。请注意不需要输出引号，行尾输出换行。 样例输入12100 样例输出1not leap year 12345678910111213141516#include &lt;stdio.h&gt; int main()&#123; int y; printf("请输入一个2000至2500年间的任意年份："); scanf("%d",&amp;y); if(y%4==0&amp;&amp;y%100!=0||y%400==0) &#123; printf("leap year"); &#125; else &#123; printf("not leap year"); &#125; return 0;&#125; 题目描述计算 输入无 输出输出题目描述中表达式的值，使用C语言默认舍入方式保留8位小数。请注意行尾输出换行。 样例输入1无 样例输出10.68817218 12345678910111213#include &lt;stdio.h&gt; int main()&#123; int sign=1; double j,sum=0; for(j=1;j&lt;=100;j++)&#123; sum+=sign*(1/j); sign=-sign;&#125;printf("%.8f",sum);return 0;&#125;]]></content>
      <categories>
        <category>语法练习</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>语法</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190922日总结]]></title>
    <url>%2F2019%2F09%2F22%2F20190922%E6%97%A5%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[妈的 花了一天时间 就整出这个傻屌东西醉了 醉了编程 太难了智力不够劝退搬砖大家好 我是憨憨憨是憨憨的憨2019.9.22 成果纪念 接下来的日子 抽时间 完善网站功能学习makedownC语言基础语法+数据结构+算法+项目+实践开始 NEW PLAN倒计时！！！！！！读杂书 进阶]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
